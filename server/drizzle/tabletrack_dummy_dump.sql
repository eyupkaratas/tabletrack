-- TableTrack comprehensive dummy dataset with realistic UUIDs and varied workload

BEGIN;

CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Drop existing structures ----------------------------------------------------
DROP TABLE IF EXISTS payments CASCADE;
DROP TABLE IF EXISTS order_items CASCADE;
DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS products CASCADE;
DROP TABLE IF EXISTS tables CASCADE;
DROP TABLE IF EXISTS users CASCADE;

DROP TYPE IF EXISTS item_status CASCADE;
DROP TYPE IF EXISTS order_status CASCADE;
DROP TYPE IF EXISTS payment_method CASCADE;
DROP TYPE IF EXISTS table_status CASCADE;
DROP TYPE IF EXISTS role CASCADE;

-- Enum definitions -------------------------------------------------------------
CREATE TYPE role AS ENUM ('admin', 'manager', 'waiter');
CREATE TYPE table_status AS ENUM ('available', 'active');
CREATE TYPE order_status AS ENUM ('open', 'completed', 'closed');
CREATE TYPE item_status AS ENUM ('placed', 'served', 'cancelled');
CREATE TYPE payment_method AS ENUM ('cash', 'card');

-- Tables ----------------------------------------------------------------------
CREATE TABLE users (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  email text NOT NULL,
  password text NOT NULL,
  role role NOT NULL DEFAULT 'waiter',
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT users_email_unique UNIQUE (email)
);

CREATE TABLE tables (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  number integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  status table_status NOT NULL DEFAULT 'available',
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT tables_number_unique UNIQUE (number)
);

CREATE TABLE products (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  category text,
  price numeric(10, 2) NOT NULL,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT products_name_unique UNIQUE (name)
);

CREATE TABLE orders (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  table_id uuid NOT NULL REFERENCES tables (id),
  order_status order_status NOT NULL DEFAULT 'open',
  user_id uuid NOT NULL REFERENCES users (id),
  created_at timestamptz DEFAULT now(),
  closed_at timestamptz DEFAULT now(),
  total numeric(10, 2) DEFAULT 0
);

CREATE TABLE order_items (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  order_id uuid NOT NULL REFERENCES orders (id),
  product_id uuid NOT NULL REFERENCES products (id),
  quantity integer NOT NULL,
  unit_price numeric(10, 2) NOT NULL,
  item_status item_status NOT NULL DEFAULT 'placed'
);

CREATE TABLE payments (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  order_id uuid NOT NULL REFERENCES orders (id),
  amount numeric(10, 2) NOT NULL,
  method payment_method NOT NULL,
  paid_at timestamptz DEFAULT now()
);

-- Seed users with generated UUIDs ---------------------------------------------
INSERT INTO users (id, name, email, password, role, created_at)
SELECT gen_random_uuid(), name, email, password, role::role, created_at
FROM (
  VALUES
    ('Admin User', 'admin@admin.com', '$2b$10$4NlhgcOU/jcxwvtke6twvuBQ8Qv41WymvLB0MB1ZyqXAIoJmqDMEi', 'admin', '2025-08-20T08:00:00+03'::timestamptz),
    ('Efe Manager', 'efe.manager@tabletrack.dev', '$2b$10$iplM46BUZPRHfUY1twM9oegaQg.da0WWnZ3OGcQI3ZvxeladtTNzm', 'manager', '2025-08-22T09:30:00+03'::timestamptz),
    ('Selin Supervisor', 'selin.supervisor@tabletrack.dev', '$2b$10$/rJlVN5/SEgdZzp9vnFpMeIJrHmW.PL1NSsDOp5UOCQCrDwoeNwXK', 'manager', '2025-08-22T09:35:00+03'::timestamptz),
    ('Burak Aydin', 'burak.waiter@tabletrack.dev', '$2b$10$gujA8x6bAL8vBbT/lfdUM.1RtlHUzWjLl8P6eKlhi9Nf16oDpU2Ra', 'waiter', '2025-08-25T10:05:00+03'::timestamptz),
    ('Elif Oral', 'elif.waiter@tabletrack.dev', '$2b$10$k/bjTAbiZmMxbGXPJbem8ewGIFW8vPBR./pvP89P0Hq1aawITXorC', 'waiter', '2025-08-25T10:07:00+03'::timestamptz),
    ('Can Demir', 'can.waiter@tabletrack.dev', '$2b$10$5QcECWZsPrb5AHu.WkbfZOHI5/0vT08XNpIQE.wlyEfJ0txmzkuNq', 'waiter', '2025-08-25T10:09:00+03'::timestamptz),
    ('Merve Guler', 'merve.waiter@tabletrack.dev', '$2b$10$Q2rQN/GJSukfdg9yPyM1O.du1VoOH7JqegHRKnTBuVyuFcmuEXbIu', 'waiter', '2025-08-25T10:10:00+03'::timestamptz),
    ('Deniz Yilmaz', 'deniz.waiter@tabletrack.dev', '$2b$10$v4xCCcHl6K6j6gZeH/F0G.03xVzEi9N3ajD1CFs.LRi9OwBUFUgW2', 'waiter', '2025-08-25T10:12:00+03'::timestamptz),
    ('Gamze Cetin', 'gamze.waiter@tabletrack.dev', '$2b$10$xjzORLct.9USw98f9aFrQuuWV0bZGhSwIR0SV8uG2BDRJdgoGn9fK', 'waiter', '2025-08-25T10:14:00+03'::timestamptz),
    ('Ahmet Kaya', 'ahmet.waiter@tabletrack.dev', '$2b$10$XYwGpPc7e0.SgeNBmbtcyO8J3n7SpTMa06w5VP3V.eykDeFSoJOTe', 'waiter', '2025-08-25T10:16:00+03'::timestamptz)
) AS u(name, email, password, role, created_at);

-- Seed tables -----------------------------------------------------------------
INSERT INTO tables (id, number, status, created_at)
SELECT gen_random_uuid(), number, status::table_status, created_at
FROM (
  VALUES
    (1, 'active', '2025-08-30T08:00:00+03'::timestamptz),
    (2, 'active', '2025-08-30T08:00:00+03'::timestamptz),
    (3, 'active', '2025-08-30T08:05:00+03'::timestamptz),
    (4, 'active', '2025-08-30T08:05:00+03'::timestamptz),
    (5, 'active', '2025-08-30T08:10:00+03'::timestamptz),
    (6, 'active', '2025-08-30T08:10:00+03'::timestamptz),
    (7, 'available', '2025-08-30T08:12:00+03'::timestamptz),
    (8, 'available', '2025-08-30T08:12:00+03'::timestamptz),
    (9, 'available', '2025-08-30T08:15:00+03'::timestamptz),
    (10, 'available', '2025-08-30T08:15:00+03'::timestamptz),
    (11, 'available', '2025-08-30T08:20:00+03'::timestamptz),
    (12, 'available', '2025-08-30T08:20:00+03'::timestamptz),
    (13, 'available', '2025-08-30T08:25:00+03'::timestamptz),
    (14, 'available', '2025-08-30T08:25:00+03'::timestamptz),
    (15, 'available', '2025-08-30T08:30:00+03'::timestamptz)
) AS t(number, status, created_at);

-- Seed products ---------------------------------------------------------------
INSERT INTO products (id, name, category, price, is_active, created_at)
SELECT gen_random_uuid(), name, category, price, true, created_at
FROM (
  VALUES
    ('Turkish Coffee', 'Beverage', 42.00, '2025-08-28T09:00:00+03'::timestamptz),
    ('Espresso', 'Beverage', 38.00, '2025-08-28T09:02:00+03'::timestamptz),
    ('Americano', 'Beverage', 44.00, '2025-08-28T09:04:00+03'::timestamptz),
    ('Cappuccino', 'Beverage', 55.00, '2025-08-28T09:06:00+03'::timestamptz),
    ('Latte', 'Beverage', 58.00, '2025-08-28T09:08:00+03'::timestamptz),
    ('Flat White', 'Beverage', 60.00, '2025-08-28T09:10:00+03'::timestamptz),
    ('Mocha', 'Beverage', 62.00, '2025-08-28T09:12:00+03'::timestamptz),
    ('Matcha Latte', 'Beverage', 68.00, '2025-08-28T09:14:00+03'::timestamptz),
    ('Fresh Orange Juice', 'Beverage', 52.00, '2025-08-28T09:16:00+03'::timestamptz),
    ('Sparkling Water', 'Beverage', 28.00, '2025-08-28T09:18:00+03'::timestamptz),
    ('Still Water', 'Beverage', 18.00, '2025-08-28T09:20:00+03'::timestamptz),
    ('Herbal Tea', 'Beverage', 36.00, '2025-08-28T09:22:00+03'::timestamptz),
    ('Margherita Pizza', 'Kitchen', 168.00, '2025-08-28T09:30:00+03'::timestamptz),
    ('Four Cheese Pizza', 'Kitchen', 195.00, '2025-08-28T09:32:00+03'::timestamptz),
    ('Pepperoni Pizza', 'Kitchen', 202.00, '2025-08-28T09:34:00+03'::timestamptz),
    ('Chicken Burger', 'Kitchen', 145.00, '2025-08-28T09:36:00+03'::timestamptz),
    ('Mediterranean Salad', 'Kitchen', 118.00, '2025-08-28T09:38:00+03'::timestamptz),
    ('Caesar Salad', 'Kitchen', 124.00, '2025-08-28T09:40:00+03'::timestamptz),
    ('Grilled Salmon', 'Kitchen', 210.00, '2025-08-28T09:42:00+03'::timestamptz),
    ('Roasted Chicken', 'Kitchen', 185.00, '2025-08-28T09:44:00+03'::timestamptz),
    ('Chocolate Brownie', 'Dessert', 72.00, '2025-08-28T09:50:00+03'::timestamptz),
    ('Tiramisu', 'Dessert', 84.00, '2025-08-28T09:52:00+03'::timestamptz),
    ('Panna Cotta', 'Dessert', 79.00, '2025-08-28T09:54:00+03'::timestamptz),
    ('New York Cheesecake', 'Dessert', 94.00, '2025-08-28T09:56:00+03'::timestamptz),
    ('Baklava Plate', 'Dessert', 88.00, '2025-08-28T10:00:00+03'::timestamptz),
    ('Seasonal Fruit Bowl', 'Kitchen', 110.00, '2025-08-28T10:02:00+03'::timestamptz),
    ('Truffle Pasta', 'Kitchen', 225.00, '2025-08-28T10:04:00+03'::timestamptz),
    ('Grilled Ribeye', 'Kitchen', 285.00, '2025-08-28T10:06:00+03'::timestamptz),
    ('Veggie Wrap', 'Kitchen', 132.00, '2025-08-28T10:08:00+03'::timestamptz),
    ('Iced Caramel Latte', 'Beverage', 65.00, '2025-08-28T10:10:00+03'::timestamptz)
) AS p(name, category, price, created_at);

-- Seed orders and order items with realistic distribution ---------------------
WITH waiter_lookup AS (
  SELECT
    (SELECT id FROM users WHERE email = 'burak.waiter@tabletrack.dev') AS burak,
    (SELECT id FROM users WHERE email = 'elif.waiter@tabletrack.dev') AS elif,
    (SELECT id FROM users WHERE email = 'can.waiter@tabletrack.dev') AS can,
    (SELECT id FROM users WHERE email = 'merve.waiter@tabletrack.dev') AS merve,
    (SELECT id FROM users WHERE email = 'deniz.waiter@tabletrack.dev') AS deniz,
    (SELECT id FROM users WHERE email = 'gamze.waiter@tabletrack.dev') AS gamze,
    (SELECT id FROM users WHERE email = 'ahmet.waiter@tabletrack.dev') AS ahmet
),
table_array AS (
  SELECT array_agg(id ORDER BY number) AS ids
  FROM tables
),
product_array AS (
  SELECT array_agg(id ORDER BY name) AS ids
  FROM products
),
calendar AS (
  SELECT
    gs AS order_index,
    gs / 70 AS week_index,
    gs % 7 AS day_index,
    gs % 10 AS slot_index,
    gs % 5 AS mini_slot
  FROM generate_series(0, 279) AS gs
),
order_seed AS (
  SELECT
    gen_random_uuid() AS id,
    calendar.order_index,
    table_array.ids[((calendar.order_index * 9 + calendar.day_index * 2 + calendar.week_index) % array_length(table_array.ids, 1)) + 1] AS table_id,
    CASE
      WHEN calendar.order_index >= 268 THEN 'open'
      WHEN calendar.week_index = 3 AND calendar.day_index >= 5 AND calendar.slot_index >= 6 THEN 'open'
      WHEN calendar.order_index % 6 = 0 THEN 'closed'
      WHEN calendar.order_index % 6 = 1 THEN 'completed'
      WHEN calendar.order_index % 6 = 2 THEN 'completed'
      WHEN calendar.order_index % 6 = 3 THEN 'closed'
      WHEN calendar.order_index % 6 = 4 THEN 'completed'
      ELSE 'closed'
    END::order_status AS order_status,
    (
      CASE calendar.week_index
        WHEN 0 THEN
          CASE
            WHEN calendar.day_index IN (5, 6) AND calendar.slot_index >= 5 THEN waiter_lookup.gamze
            WHEN calendar.day_index = 0 AND calendar.slot_index < 6 THEN waiter_lookup.burak
            WHEN calendar.day_index = 1 THEN waiter_lookup.elif
            WHEN calendar.day_index = 2 THEN CASE WHEN calendar.slot_index % 2 = 0 THEN waiter_lookup.deniz ELSE waiter_lookup.can END
            WHEN calendar.day_index = 3 THEN waiter_lookup.burak
            WHEN calendar.day_index = 4 THEN waiter_lookup.elif
            ELSE waiter_lookup.merve
          END
        WHEN 1 THEN
          CASE
            WHEN calendar.day_index = 0 THEN waiter_lookup.deniz
            WHEN calendar.day_index = 1 THEN waiter_lookup.merve
            WHEN calendar.day_index = 2 AND calendar.slot_index >= 7 THEN waiter_lookup.ahmet
            WHEN calendar.day_index = 2 THEN waiter_lookup.can
            WHEN calendar.day_index = 3 THEN waiter_lookup.deniz
            WHEN calendar.day_index = 4 THEN waiter_lookup.gamze
            ELSE waiter_lookup.burak
          END
        WHEN 2 THEN
          CASE
            WHEN calendar.day_index IN (0, 6) THEN waiter_lookup.ahmet
            WHEN calendar.day_index = 1 THEN waiter_lookup.gamze
            WHEN calendar.day_index = 2 THEN waiter_lookup.elif
            WHEN calendar.day_index = 3 THEN waiter_lookup.merve
            WHEN calendar.day_index = 4 THEN waiter_lookup.can
            WHEN calendar.day_index = 5 THEN waiter_lookup.deniz
            ELSE waiter_lookup.burak
          END
        ELSE
          CASE
            WHEN calendar.day_index = 0 THEN waiter_lookup.can
            WHEN calendar.day_index = 1 THEN waiter_lookup.burak
            WHEN calendar.day_index = 2 THEN waiter_lookup.deniz
            WHEN calendar.day_index = 3 AND calendar.slot_index >= 7 THEN waiter_lookup.gamze
            WHEN calendar.day_index = 3 THEN waiter_lookup.elif
            WHEN calendar.day_index = 4 THEN waiter_lookup.merve
            WHEN calendar.day_index = 5 THEN waiter_lookup.ahmet
            ELSE waiter_lookup.gamze
          END
      END
    ) AS user_id,
    (
      TIMESTAMPTZ '2025-09-15 08:00:00+03'
      + (calendar.week_index * INTERVAL '7 days')
      + (calendar.day_index * INTERVAL '1 day')
      + (calendar.slot_index * INTERVAL '65 minutes')
      + (calendar.mini_slot * INTERVAL '6 minutes')
      + ((calendar.order_index % 3) * INTERVAL '3 minutes')
    ) AS created_at
  FROM calendar
  CROSS JOIN table_array
  CROSS JOIN waiter_lookup
),
prepared_orders AS (
  SELECT
    os.id,
    os.order_index,
    os.table_id,
    os.order_status,
    os.user_id,
    os.created_at,
    CASE
      WHEN os.order_status = 'open' THEN NULL
      ELSE os.created_at
        + INTERVAL '38 minutes'
        + ((os.order_index % 5) * INTERVAL '5 minutes')
        + ((os.order_index % 3) * INTERVAL '2 minutes')
    END AS closed_at
  FROM order_seed os
),
inserted_orders AS (
  INSERT INTO orders (id, table_id, order_status, user_id, created_at, closed_at, total)
  SELECT id, table_id, order_status, user_id, created_at, closed_at, 0
  FROM prepared_orders
  RETURNING id, table_id, order_status, user_id, created_at
),
order_details AS (
  SELECT
    io.id,
    po.order_index,
    po.order_status,
    po.user_id,
    po.table_id,
    po.created_at,
    po.closed_at,
    ((po.order_index % 4) + 2) AS item_count
  FROM inserted_orders io
  JOIN prepared_orders po ON po.id = io.id
),
order_item_rows AS (
  SELECT
    gen_random_uuid() AS id,
    od.id AS order_id,
    product_array.ids[((od.order_index * 5 + item_offset * 7 + od.item_count) % array_length(product_array.ids, 1)) + 1] AS product_id,
    1 + ((item_offset + od.order_index) % 3) AS quantity,
    CASE
      WHEN od.order_status = 'open' AND item_offset >= od.item_count - 1 THEN 'placed'
      WHEN (od.order_index + item_offset) % 17 = 0 THEN 'cancelled'
      WHEN (od.order_index % 29 = 0 AND item_offset = 0) THEN 'placed'
      ELSE 'served'
    END::item_status AS item_status
  FROM order_details od
  CROSS JOIN product_array
  CROSS JOIN LATERAL generate_series(0, od.item_count - 1) AS item_offset
)
INSERT INTO order_items (id, order_id, product_id, quantity, unit_price, item_status)
SELECT
  oir.id,
  oir.order_id,
  oir.product_id,
  oir.quantity,
  p.price,
  oir.item_status
FROM order_item_rows oir
JOIN products p ON p.id = oir.product_id;

-- Update totals excluding cancelled items -------------------------------------
UPDATE orders o
SET total = COALESCE(sub.total_value, 0)
FROM (
  SELECT
    order_id,
    SUM(quantity * unit_price) FILTER (WHERE item_status <> 'cancelled') AS total_value
  FROM order_items
  GROUP BY order_id
) sub
WHERE o.id = sub.order_id;

-- Seed payments only for completed/closed orders ------------------------------
WITH payment_source AS (
  SELECT
    o.id,
    o.total,
    o.order_status,
    COALESCE(o.closed_at, o.created_at + INTERVAL '45 minutes') AS paid_at_base,
    ROW_NUMBER() OVER (ORDER BY o.created_at) AS rn,
    EXTRACT(WEEK FROM o.created_at)::int AS week_no
  FROM orders o
  WHERE o.order_status <> 'open'
)
INSERT INTO payments (id, order_id, amount, method, paid_at)
SELECT
  gen_random_uuid(),
  ps.id,
  ps.total,
  CASE
    WHEN ps.week_no % 3 = 0 AND ps.rn % 4 <> 0 THEN 'cash'
    WHEN ps.rn % 5 = 0 THEN 'cash'
    ELSE 'card'
  END::payment_method,
  ps.paid_at_base + ((ps.rn % 6) * INTERVAL '4 minutes')
FROM payment_source ps;

COMMIT;
