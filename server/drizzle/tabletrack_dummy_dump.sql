-- TableTrack extensive dummy dataset
-- Drops existing tables/types and rebuilds them with rich seed data

BEGIN;

CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Drop existing data structures ------------------------------------------------
DROP TABLE IF EXISTS payments CASCADE;
DROP TABLE IF EXISTS order_items CASCADE;
DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS products CASCADE;
DROP TABLE IF EXISTS tables CASCADE;
DROP TABLE IF EXISTS users CASCADE;

DROP TYPE IF EXISTS item_status CASCADE;
DROP TYPE IF EXISTS order_status CASCADE;
DROP TYPE IF EXISTS payment_method CASCADE;
DROP TYPE IF EXISTS table_status CASCADE;
DROP TYPE IF EXISTS role CASCADE;

-- Type definitions -------------------------------------------------------------
CREATE TYPE role AS ENUM ('admin', 'manager', 'waiter');
CREATE TYPE table_status AS ENUM ('available', 'active');
CREATE TYPE order_status AS ENUM ('open', 'completed', 'closed');
CREATE TYPE item_status AS ENUM ('placed', 'served', 'cancelled');
CREATE TYPE payment_method AS ENUM ('cash', 'card');

-- Tables -----------------------------------------------------------------------
CREATE TABLE users (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  email text NOT NULL,
  password text NOT NULL,
  role role NOT NULL DEFAULT 'waiter',
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT users_email_unique UNIQUE (email)
);

CREATE TABLE tables (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  number integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  status table_status NOT NULL DEFAULT 'available',
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT tables_number_unique UNIQUE (number)
);

CREATE TABLE products (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  category text,
  price numeric(10, 2) NOT NULL,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamptz NOT NULL DEFAULT now(),
  CONSTRAINT products_name_unique UNIQUE (name)
);

CREATE TABLE orders (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  table_id uuid NOT NULL REFERENCES tables (id),
  order_status order_status NOT NULL DEFAULT 'open',
  user_id uuid NOT NULL REFERENCES users (id),
  created_at timestamptz DEFAULT now(),
  closed_at timestamptz DEFAULT now(),
  total numeric(10, 2) DEFAULT 0
);

CREATE TABLE order_items (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  order_id uuid NOT NULL REFERENCES orders (id),
  product_id uuid NOT NULL REFERENCES products (id),
  quantity integer NOT NULL,
  unit_price numeric(10, 2) NOT NULL,
  item_status item_status NOT NULL DEFAULT 'placed'
);

CREATE TABLE payments (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  order_id uuid NOT NULL REFERENCES orders (id),
  amount numeric(10, 2) NOT NULL,
  method payment_method NOT NULL,
  paid_at timestamptz DEFAULT now()
);

-- Seed: users ------------------------------------------------------------------
INSERT INTO users (id, name, email, password, role, created_at) VALUES
  ('11111111-1111-1111-1111-111111111111', 'Admin User', 'admin@admin.com', '$2b$10$4NlhgcOU/jcxwvtke6twvuBQ8Qv41WymvLB0MB1ZyqXAIoJmqDMEi', 'admin', '2025-08-20T08:00:00+03'),
  ('22222222-2222-2222-2222-222222222222', 'Efe Manager', 'efe.manager@tabletrack.dev', '$2b$10$iplM46BUZPRHfUY1twM9oegaQg.da0WWnZ3OGcQI3ZvxeladtTNzm', 'manager', '2025-08-22T09:30:00+03'),
  ('33333333-3333-3333-3333-333333333333', 'Selin Supervisor', 'selin.supervisor@tabletrack.dev', '$2b$10$/rJlVN5/SEgdZzp9vnFpMeIJrHmW.PL1NSsDOp5UOCQCrDwoeNwXK', 'manager', '2025-08-22T09:35:00+03'),
  ('55555555-5555-5555-5555-555555555501', 'Burak Aydin', 'burak.waiter@tabletrack.dev', '$2b$10$gujA8x6bAL8vBbT/lfdUM.1RtlHUzWjLl8P6eKlhi9Nf16oDpU2Ra', 'waiter', '2025-08-25T10:05:00+03'),
  ('55555555-5555-5555-5555-555555555502', 'Elif Oral', 'elif.waiter@tabletrack.dev', '$2b$10$k/bjTAbiZmMxbGXPJbem8ewGIFW8vPBR./pvP89P0Hq1aawITXorC', 'waiter', '2025-08-25T10:07:00+03'),
  ('55555555-5555-5555-5555-555555555503', 'Can Demir', 'can.waiter@tabletrack.dev', '$2b$10$5QcECWZsPrb5AHu.WkbfZOHI5/0vT08XNpIQE.wlyEfJ0txmzkuNq', 'waiter', '2025-08-25T10:09:00+03'),
  ('55555555-5555-5555-5555-555555555504', 'Merve Guler', 'merve.waiter@tabletrack.dev', '$2b$10$Q2rQN/GJSukfdg9yPyM1O.du1VoOH7JqegHRKnTBuVyuFcmuEXbIu', 'waiter', '2025-08-25T10:10:00+03'),
  ('55555555-5555-5555-5555-555555555505', 'Deniz Yilmaz', 'deniz.waiter@tabletrack.dev', '$2b$10$v4xCCcHl6K6j6gZeH/F0G.03xVzEi9N3ajD1CFs.LRi9OwBUFUgW2', 'waiter', '2025-08-25T10:12:00+03'),
  ('55555555-5555-5555-5555-555555555506', 'Gamze Cetin', 'gamze.waiter@tabletrack.dev', '$2b$10$xjzORLct.9USw98f9aFrQuuWV0bZGhSwIR0SV8uG2BDRJdgoGn9fK', 'waiter', '2025-08-25T10:14:00+03');

-- Seed: tables -----------------------------------------------------------------
INSERT INTO tables (id, number, status, created_at) VALUES
  ('30000000-0000-0000-0000-000000000001', 1, 'active', '2025-08-30T08:00:00+03'),
  ('30000000-0000-0000-0000-000000000002', 2, 'active', '2025-08-30T08:00:00+03'),
  ('30000000-0000-0000-0000-000000000003', 3, 'active', '2025-08-30T08:05:00+03'),
  ('30000000-0000-0000-0000-000000000004', 4, 'active', '2025-08-30T08:05:00+03'),
  ('30000000-0000-0000-0000-000000000005', 5, 'available', '2025-08-30T08:10:00+03'),
  ('30000000-0000-0000-0000-000000000006', 6, 'available', '2025-08-30T08:10:00+03'),
  ('30000000-0000-0000-0000-000000000007', 7, 'available', '2025-08-30T08:12:00+03'),
  ('30000000-0000-0000-0000-000000000008', 8, 'available', '2025-08-30T08:12:00+03'),
  ('30000000-0000-0000-0000-000000000009', 9, 'available', '2025-08-30T08:15:00+03'),
  ('30000000-0000-0000-0000-000000000010', 10, 'available', '2025-08-30T08:15:00+03'),
  ('30000000-0000-0000-0000-000000000011', 11, 'available', '2025-08-30T08:20:00+03'),
  ('30000000-0000-0000-0000-000000000012', 12, 'available', '2025-08-30T08:20:00+03');

-- Seed: products ---------------------------------------------------------------
INSERT INTO products (id, name, category, price, is_active, created_at) VALUES
  ('40000000-0000-0000-0000-000000000001', 'Turkish Coffee', 'Beverage', 42.00, true, '2025-08-28T09:00:00+03'),
  ('40000000-0000-0000-0000-000000000002', 'Espresso', 'Beverage', 38.00, true, '2025-08-28T09:02:00+03'),
  ('40000000-0000-0000-0000-000000000003', 'Americano', 'Beverage', 44.00, true, '2025-08-28T09:04:00+03'),
  ('40000000-0000-0000-0000-000000000004', 'Cappuccino', 'Beverage', 55.00, true, '2025-08-28T09:06:00+03'),
  ('40000000-0000-0000-0000-000000000005', 'Latte', 'Beverage', 58.00, true, '2025-08-28T09:08:00+03'),
  ('40000000-0000-0000-0000-000000000006', 'Flat White', 'Beverage', 60.00, true, '2025-08-28T09:10:00+03'),
  ('40000000-0000-0000-0000-000000000007', 'Mocha', 'Beverage', 62.00, true, '2025-08-28T09:12:00+03'),
  ('40000000-0000-0000-0000-000000000008', 'Matcha Latte', 'Beverage', 68.00, true, '2025-08-28T09:14:00+03'),
  ('40000000-0000-0000-0000-000000000009', 'Fresh Orange Juice', 'Beverage', 52.00, true, '2025-08-28T09:16:00+03'),
  ('40000000-0000-0000-0000-000000000010', 'Sparkling Water', 'Beverage', 28.00, true, '2025-08-28T09:18:00+03'),
  ('40000000-0000-0000-0000-000000000011', 'Still Water', 'Beverage', 18.00, true, '2025-08-28T09:20:00+03'),
  ('40000000-0000-0000-0000-000000000012', 'Herbal Tea', 'Beverage', 36.00, true, '2025-08-28T09:22:00+03'),
  ('40000000-0000-0000-0000-000000000013', 'Margherita Pizza', 'Kitchen', 168.00, true, '2025-08-28T09:30:00+03'),
  ('40000000-0000-0000-0000-000000000014', 'Four Cheese Pizza', 'Kitchen', 195.00, true, '2025-08-28T09:32:00+03'),
  ('40000000-0000-0000-0000-000000000015', 'Pepperoni Pizza', 'Kitchen', 202.00, true, '2025-08-28T09:34:00+03'),
  ('40000000-0000-0000-0000-000000000016', 'Chicken Burger', 'Kitchen', 145.00, true, '2025-08-28T09:36:00+03'),
  ('40000000-0000-0000-0000-000000000017', 'Mediterranean Salad', 'Kitchen', 118.00, true, '2025-08-28T09:38:00+03'),
  ('40000000-0000-0000-0000-000000000018', 'Caesar Salad', 'Kitchen', 124.00, true, '2025-08-28T09:40:00+03'),
  ('40000000-0000-0000-0000-000000000019', 'Grilled Salmon', 'Kitchen', 210.00, true, '2025-08-28T09:42:00+03'),
  ('40000000-0000-0000-0000-000000000020', 'Roasted Chicken', 'Kitchen', 185.00, true, '2025-08-28T09:44:00+03'),
  ('40000000-0000-0000-0000-000000000021', 'Chocolate Brownie', 'Dessert', 72.00, true, '2025-08-28T09:50:00+03'),
  ('40000000-0000-0000-0000-000000000022', 'Tiramisu', 'Dessert', 84.00, true, '2025-08-28T09:52:00+03'),
  ('40000000-0000-0000-0000-000000000023', 'Panna Cotta', 'Dessert', 79.00, true, '2025-08-28T09:54:00+03'),
  ('40000000-0000-0000-0000-000000000024', 'New York Cheesecake', 'Dessert', 94.00, true, '2025-08-28T09:56:00+03');

-- Seed: historical orders & items ---------------------------------------------
WITH waiter_pool AS (
  SELECT ARRAY[
    '55555555-5555-5555-5555-555555555501'::uuid,
    '55555555-5555-5555-5555-555555555502'::uuid,
    '55555555-5555-5555-5555-555555555503'::uuid,
    '55555555-5555-5555-5555-555555555504'::uuid,
    '55555555-5555-5555-5555-555555555505'::uuid,
    '55555555-5555-5555-5555-555555555506'::uuid
  ] AS ids
),
table_pool AS (
  SELECT ARRAY[
    '30000000-0000-0000-0000-000000000001'::uuid,
    '30000000-0000-0000-0000-000000000002'::uuid,
    '30000000-0000-0000-0000-000000000003'::uuid,
    '30000000-0000-0000-0000-000000000004'::uuid,
    '30000000-0000-0000-0000-000000000005'::uuid,
    '30000000-0000-0000-0000-000000000006'::uuid,
    '30000000-0000-0000-0000-000000000007'::uuid,
    '30000000-0000-0000-0000-000000000008'::uuid,
    '30000000-0000-0000-0000-000000000009'::uuid,
    '30000000-0000-0000-0000-000000000010'::uuid,
    '30000000-0000-0000-0000-000000000011'::uuid,
    '30000000-0000-0000-0000-000000000012'::uuid
  ] AS ids
),
product_pool AS (
  SELECT ARRAY[
    '40000000-0000-0000-0000-000000000001'::uuid,
    '40000000-0000-0000-0000-000000000002'::uuid,
    '40000000-0000-0000-0000-000000000003'::uuid,
    '40000000-0000-0000-0000-000000000004'::uuid,
    '40000000-0000-0000-0000-000000000005'::uuid,
    '40000000-0000-0000-0000-000000000006'::uuid,
    '40000000-0000-0000-0000-000000000007'::uuid,
    '40000000-0000-0000-0000-000000000008'::uuid,
    '40000000-0000-0000-0000-000000000009'::uuid,
    '40000000-0000-0000-0000-000000000010'::uuid,
    '40000000-0000-0000-0000-000000000011'::uuid,
    '40000000-0000-0000-0000-000000000012'::uuid,
    '40000000-0000-0000-0000-000000000013'::uuid,
    '40000000-0000-0000-0000-000000000014'::uuid,
    '40000000-0000-0000-0000-000000000015'::uuid,
    '40000000-0000-0000-0000-000000000016'::uuid,
    '40000000-0000-0000-0000-000000000017'::uuid,
    '40000000-0000-0000-0000-000000000018'::uuid,
    '40000000-0000-0000-0000-000000000019'::uuid,
    '40000000-0000-0000-0000-000000000020'::uuid,
    '40000000-0000-0000-0000-000000000021'::uuid,
    '40000000-0000-0000-0000-000000000022'::uuid,
    '40000000-0000-0000-0000-000000000023'::uuid,
    '40000000-0000-0000-0000-000000000024'::uuid
  ] AS ids
),
order_seed AS (
  SELECT
    gen_random_uuid() AS id,
    gs AS order_index,
    table_pool.ids[(gs % array_length(table_pool.ids, 1)) + 1] AS table_id,
    CASE
      WHEN gs % 5 = 0 THEN 'closed'
      WHEN gs % 5 = 1 THEN 'completed'
      WHEN gs % 5 = 2 THEN 'completed'
      WHEN gs % 5 = 3 THEN 'closed'
      ELSE 'completed'
    END::order_status AS order_status,
    waiter_pool.ids[(gs % array_length(waiter_pool.ids, 1)) + 1] AS user_id,
    (
      TIMESTAMPTZ '2025-10-12 09:00:00+03'
      - ((gs / 4) * INTERVAL '1 day')
      + ((gs % 24) * INTERVAL '20 minutes')
    ) AS created_at
  FROM generate_series(0, 119) AS gs
  CROSS JOIN waiter_pool
  CROSS JOIN table_pool
),
prepared_orders AS (
  SELECT
    id,
    order_index,
    table_id,
    order_status,
    user_id,
    created_at,
    created_at + (((order_index % 3) + 1) * INTERVAL '35 minutes') AS closed_at
  FROM order_seed
),
inserted_orders AS (
  INSERT INTO orders (id, table_id, order_status, user_id, created_at, closed_at, total)
  SELECT id, table_id, order_status, user_id, created_at, closed_at, 0
  FROM prepared_orders
  RETURNING id, table_id, order_status, user_id, created_at, closed_at
),
order_details AS (
  SELECT
    io.*,
    po.order_index,
    ((po.order_index % 4) + 2) AS item_count
  FROM inserted_orders io
  JOIN prepared_orders po USING (id)
),
order_item_rows AS (
  SELECT
    gen_random_uuid() AS id,
    od.id AS order_id,
    product_pool.ids[((od.order_index + item_offset) % array_length(product_pool.ids, 1)) + 1] AS product_id,
    ((item_offset % 3) + 1) AS quantity,
    CASE
      WHEN ((od.order_index + item_offset) % 20) = 0 THEN 'cancelled'
      ELSE 'served'
    END::item_status AS item_status,
    item_offset
  FROM order_details od
  CROSS JOIN product_pool
  CROSS JOIN LATERAL generate_series(0, od.item_count - 1) AS item_offset
)
INSERT INTO order_items (id, order_id, product_id, quantity, unit_price, item_status)
SELECT
  oir.id,
  oir.order_id,
  oir.product_id,
  oir.quantity,
  p.price,
  CASE
    WHEN oir.item_status = 'cancelled' THEN 'cancelled'
    ELSE 'served'
  END::item_status AS item_status
FROM order_item_rows oir
JOIN products p ON p.id = oir.product_id;

-- Update totals excluding cancelled line items ---------------------------------
UPDATE orders o
SET total = COALESCE(sub.sum_price, 0)
FROM (
  SELECT
    order_id,
    SUM(quantity * unit_price) FILTER (WHERE item_status <> 'cancelled') AS sum_price
  FROM order_items
  GROUP BY order_id
) sub
WHERE o.id = sub.order_id;

-- Seed: payments (all historical orders marked as paid) -----------------------
WITH payment_source AS (
  SELECT
    o.id,
    o.total,
    COALESCE(o.closed_at, o.created_at + INTERVAL '45 minutes') AS closed_at,
    ROW_NUMBER() OVER (ORDER BY o.created_at) AS rn
  FROM orders o
)
INSERT INTO payments (id, order_id, amount, method, paid_at)
SELECT
  gen_random_uuid(),
  ps.id,
  ps.total,
  CASE
    WHEN ps.rn % 3 = 0 THEN 'cash'
    WHEN ps.rn % 2 = 0 THEN 'card'
    ELSE 'card'
  END::payment_method,
  ps.closed_at + ((ps.rn % 5) * INTERVAL '5 minutes')
FROM payment_source ps;

COMMIT;
